buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        dependencyManagementPluginVersion = '1.0.5.RELEASE'
        propdepsPluginVersion = '0.0.9.RELEASE'
        lombokVersion = '1.18.4'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:propdeps-plugin:${propdepsPluginVersion}")
//        classpath("com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugsPluginVersion}")
//        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.4")
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "jacoco"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'      // Gradle maven pluginを使う場合
apply plugin: 'propdeps-idea'       // IntelliJ IDEAを使う場合
apply plugin: 'propdeps-eclipse'    // Eclipseを使う場合

mainClassName = 'info.pkg.sample.SpringBootTemplateApplication'

//version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
	}
}

dependencies {
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	compileOnly("org.projectlombok:lombok:${lombokVersion}")
	testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    implementation("org.webjars:jquery:3.4.1")
    implementation("org.webjars:bootstrap:4.3.1")

    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-tomcat')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.springframework.boot:spring-boot-autoconfigure')
//    implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
//    implementation('org.thymeleaf.extras:thymeleaf-extras-java8time')
//    implementation('org.springframework.boot:spring-boot-starter-jetty')
    implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.3.RELEASE')
	implementation('org.springframework.boot:spring-boot-starter-jdbc')
	implementation('org.apache.commons:commons-lang3:3.7')
	implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8')
	implementation ('org.json:json:20180813')
	implementation('org.apache.httpcomponents:httpclient:4.5.7')
    implementation('mysql:mysql-connector-java:8.0.13')
    runtime('mysql:mysql-connector-java:5.1.43')
    compile('com.h2database:h2')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
}

compileJava.dependsOn(processResources)

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

javadoc {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

bootJar{
    baseName = 'spring-sample'
    version =  '1.0.0'
    launchScript()
}

wrapper {
    gradleVersion = '4.10.2'
    distributionType = Wrapper.DistributionType.ALL
}

//ext['thymeleaf.version'] = '3.0.7.RELEASE'
//ext['thymeleaf-layout-dialect.version'] = '2.2.2'
